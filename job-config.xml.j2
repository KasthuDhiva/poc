<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job">
  <actions/>
  <description>{{ description | default('Pipeline Job for WebHosting-Terraform-CICD-SonarQube') }}</description>
  <keepDependencies>false</keepDependencies>
  <properties/>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps">
    <script><![CDATA[
            pipeline {
            agent any
            environment {
                SONARQUBE_URL = 'http://sonarip:9000'  // Corrected URL reference
                PROJECT_KEY = 'poc4'
                SONAR_SCANNER_HOME = '/opt/sonar-scanner-4.8.0.2856-linux'
            }
            stages {
                stage('Checkout') {
                    steps {
                        git branch: 'main', url: 'https://github.com/KasthuDhiva/car_project.git'
                    }
                }
                stage('SonarQube Analysis') {
                    steps {
                        script {
                            sh """
                            ${SONAR_SCANNER_HOME}/bin/sonar-scanner -X \
                                -Dsonar.projectKey=${PROJECT_KEY} \
                                -Dsonar.sources=. \
                                -Dsonar.host.url=${SONARQUBE_URL} \
                                -Dsonar.login=squ_c00f763646771b261a3fb56782f381897b70fe96  
                            """
                        }
                    }
                }
                stage('Quality Gate') {
                    steps {
                        script {
                            def qg = waitForQualityGate()
                            if (qg.status == 'ERROR') {
                                currentBuild.result = 'FAILURE'
                                error "Quality Gate failed. Build aborted."
                            } else {
                                currentBuild.result = 'SUCCESS'
                            }
                        }
                    }
                }
                stage('Deploy to Apache') {
                    when {
                        expression {
                            return currentBuild.result == 'SUCCESS'
                        }
                    }
                    steps {
                        script {
                            sh 'chmod +x scripts/deploy.sh'
                            sh './scripts/deploy.sh'
                        }
                    }
                }
            }
        }

    ]]></script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>